package com.web.projectplanner.a01_controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.web.projectplanner.a02_service.CalendarService;
import com.web.projectplanner.a04_vo.Calendar;

import jakarta.servlet.http.HttpSession;

@Controller
public class CalendarController {
	@Autowired(required = false)
	private CalendarService service;

	// http://localhost:7070/calendar
	@GetMapping("calendar")
	public String calendar(HttpSession session, Model model,
	                       @RequestParam(defaultValue = "", value = "div") String div,
	                       @RequestParam(value = "projectid", required = false) Integer projectid,
	                       @RequestParam(value = "gant", required = false) Boolean gant) {

	    // 세션에서 writer와 projectid 가져오기
	    String writer = (String) session.getAttribute("empno");
	    
	    // projectid가 null일 경우 세션에서 값을 읽고 기본값 설정
	    if (projectid == null) {
	        projectid = (Integer) session.getAttribute("projectid");
	        if (projectid == null) {
	            projectid = 47; // 기본값 설정
	        }
	    }

	    List<Calendar> calendarList = new ArrayList<>();

	    // div가 비어있을 때는 기본적으로 아무 일정도 추가하지 않음
	    if (!div.isEmpty()) {
	        // div에 따라 적절한 서비스 메소드 호출
	        if (div.contains("개인")) {
	        	List<Calendar> personalList = service.getCalendarList(writer, projectid);
	            calendarList.addAll(service.getCalendarList(writer, projectid));
	        }
	        if (div.contains("팀")) {
	        	List<Calendar> teamList = service.getCalendarList2(projectid);
	            calendarList.addAll(service.getCalendarList2(projectid));
	        }
	    }

	    // 간트는 별도로 처리
	    if (gant != null && gant) {
	        calendarList.addAll(service.getCalendarList3(projectid));
	    }

	    // 모델에 데이터 추가
	    model.addAttribute("calendarList", calendarList);
	    model.addAttribute("writer", writer);
	    model.addAttribute("div", div);
	    model.addAttribute("projectid", projectid);

	    return "z05_Calendar"; // JSP 페이지 이름
	}

	// http://localhost:7070/calList
	@GetMapping("calList")
	public ResponseEntity<List<Calendar>> getCalList(
	        HttpSession session,
	        @RequestParam(defaultValue = "", value = "div") List<String> div,
	        @RequestParam(defaultValue = "47", required = false) Integer projectid,
	        @RequestParam(defaultValue = "false", value = "gant") Boolean gant) {

	    // 디버깅용 로그
	    System.out.println("Received div: " + div);

	    // 세션에서 projectid 가져오기
	    String writer = (String) session.getAttribute("empno");
	    if (projectid == null) {
	        projectid = (Integer) session.getAttribute("projectid");
	        if (projectid == null) {
	            projectid = 47; // 기본값 설정
	        }
	    }

	    List<Calendar> calendarList = new ArrayList<>();

	    // div 필터링
	    if (div != null && !div.isEmpty()) {
	        if (div.contains("개인")) {
	            List<Calendar> personalList = service.getCalendarList(writer, projectid);
	            calendarList.addAll(personalList);
	        }
	        if (div.contains("팀")) {
	            List<Calendar> teamList = service.getCalendarList2(projectid);
	            calendarList.addAll(teamList);
	        }
	    }

	    if (gant != null && gant) {
	        List<Calendar> gantList = service.getCalendarList3(projectid);
	        calendarList.addAll(gantList);
	    }


	    return ResponseEntity.ok(calendarList);
	}


/*
	@PostMapping("insertCalendar")
	public ResponseEntity<?> insertCalendar(Calendar ins, @RequestParam("writer") String writer,
			@RequestParam("projectid") String projectid, @RequestParam("div") String div) {
		// 간트 캘린더인 경우, 등록을 허용하지 않음
		if (projectid != null) {
			return ResponseEntity.badRequest().body(new Msg("간트 캘린더에서는 등록할 수 없습니다."));
		}

		// 개인 및 팀 캘린더인 경우 등록 처리
		String isInserted = service.insertCalendar(ins);
		List<Calendar> calendarList = service.getCalendarList(writer, div, projectid);

		return ResponseEntity.ok(new MsgList(isInserted, calendarList));
	}

	@PostMapping("updateCalendar")
	public ResponseEntity<?> updateCalendar(Calendar upt, @RequestParam("writer") String writer,
			@RequestParam("projectid") String projectid, @RequestParam("div") String div) {
		// 간트 캘린더인 경우, 수정하지 않음
		if (projectid != null) {
			return ResponseEntity.badRequest().body(new Msg("간트 캘린더에서는 수정할 수 없습니다."));
		}

		// 개인 및 팀 캘린더인 경우 수정 처리
		String isUpdated = service.updateCalendar(upt);
		List<Calendar> calendarList = service.getCalendarList(writer, div, projectid);

		return ResponseEntity.ok(new MsgList(isUpdated, calendarList));
	}

	@PostMapping("deleteCalendar")
	public ResponseEntity<?> deleteCalendar(@RequestParam("id") int id, @RequestParam("writer") String writer,
			@RequestParam("projectid") String projectid, @RequestParam("div") String div) {
		// 간트 캘린더인 경우, 삭제하지 않음
		if (projectid != null) {
			return ResponseEntity.badRequest().body(new Msg("간트 캘린더에서는 삭제할 수 없습니다."));
		}

		// 개인 및 팀 캘린더인 경우 삭제 처리
		String isDeleted = service.deleteCalendar(id, writer);
		List<Calendar> calendarList = service.getCalendarList(writer, div, projectid);

		return ResponseEntity.ok(new MsgList(isDeleted, calendarList));
	}
	*/

}

class MsgList {
	private String msg;
	private List<Calendar> calList;

	public MsgList() {
		super();
		// TODO Auto-generated constructor stub
	}

	public MsgList(String msg, List<Calendar> calList) {
		super();
		this.msg = msg;
		this.calList = calList;
	}

	public String getMsg() {
		return msg;
	}

	public void setMsg(String msg) {
		this.msg = msg;
	}

	public List<Calendar> getCalList() {
		return calList;
	}

	public void setCalList(List<Calendar> calList) {
		this.calList = calList;
	}
}

class Msg {
	private String message;

	public Msg() {
		super();
		// TODO Auto-generated constructor stub
	}

	public Msg(String message) {
		this.message = message;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}
}
